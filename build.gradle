import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'org.springframework.boot' version '3.0.6'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.jetbrains.kotlin.jvm' version '1.7.22'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.7.22'
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'com.adarshr.test-logger' version '3.2.0'
    id 'jacoco'
    id "org.sonarqube" version "3.5.0.2730"
}

group = 'com.shoppinglist'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '18'

configurations {
    ktlint
}

repositories {
    mavenCentral()
}

dependencies {
    ktlint "com.pinterest:ktlint:0.49.1"
    // Align versions of all Kotlin components
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'com.h2database:h2'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.mockito', module: 'mockito-core'
        exclude group: 'org.mockito', module: 'mockito-junit-jupiter'
    }
    testImplementation 'io.kotest:kotest-runner-junit5:5.6.1'
    testImplementation("io.kotest.extensions:kotest-extensions-spring:1.1.2")
    testImplementation 'com.ninja-squad:springmockk:4.0.2'
    testImplementation 'org.springframework:spring-webflux'
    testImplementation 'org.springframework.graphql:spring-graphql-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation 'io.cucumber:cucumber-java:7.11.1'
    testImplementation 'io.cucumber:cucumber-junit:7.11.1'
    testImplementation 'org.junit.vintage:junit-vintage-engine:5.9.2'
    testImplementation 'io.cucumber:cucumber-junit-platform-engine:7.11.1'
    testImplementation 'io.cucumber:cucumber-spring:7.11.1'


}

task installGitHook(type: Copy, group: "git-hooks") {
    from new File(rootProject.rootDir, 'scripts/pre-commit')
    into { new File(rootProject.rootDir, '.git/hooks')}
    fileMode 0775
}
check.dependsOn installGitHook

tasks.withType(KotlinCompile) {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '18'
    }
}

tasks.named('test') {
    testlogger {
        useJUnitPlatform()
    }
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    mainClass = "com.pinterest.ktlint.Main"
    args "src/**/*.kt"
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "verification") {
    jvmArgs "--add-opens", "java.base/java.lang=ALL-UNNAMED"
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    mainClass = "com.pinterest.ktlint.Main"
    args "-F", "src/**/*.kt"
}

jacocoTestReport {
    dependsOn test
    executionData tasks.withType(Test).findAll { it.state.executed }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [])
        }))
    }
    reports {
        xml.setEnabled(true)
        html.setEnabled(true)
        html.destination file("${buildDir}/jacocoHtml")
    }
}

jacocoTestCoverageVerification {
    dependsOn test
    executionData tasks.withType(Test).findAll { it.state.executed }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [])
        }))
    }
    violationRules {
        rule {
            limit {
                counter = 'INSTRUCTION'
                minimum = 0.8
            }
            limit {
                counter = 'BRANCH'
                minimum = 0.8
            }
            limit {
                counter = 'LINE'
                minimum = 0.8
            }
            limit {
                counter = 'METHOD'
                minimum = 0.8
            }
            limit {
                counter = 'CLASS'
                minimum = 0.8
            }
        }
    }
}

sonar {
    properties {
        property "sonar.projectKey", "danielvillahermosadominguez_shopping_list_backend_kot"
        property "sonar.organization", "danielvillahermosadominguez"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.projectVersion", "latest"
        property "sonar.sources", "src/main/kotlin"
        property "sonar.tests", "src/test/kotlin"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.junit.reportsPath", "build/test-results/test/TEST-*.xml"
    }
}